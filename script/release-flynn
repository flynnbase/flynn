#!/bin/bash
#
# A script to do a full release of Flynn (packages + VM images)
#
# PREREQUISITES:
#
# - A recent version of jq (which has the --exit-status flag)
#   sudo curl -sLo /usr/local/bin/jq http://stedolan.github.io/jq/download/linux64/jq
#   sudo chmod +x /usr/local/bin/jq

set -eo pipefail

ROOT="$(cd "$(dirname "$0")/.." && pwd)"
source "${ROOT}/script/lib/ui.sh"
source "${ROOT}/script/lib/aws.sh"

usage() {
  cat <<USAGE >&2
usage: $0 [options]

OPTIONS:
  -h            Show this message
  -b BUCKET     The S3 bucket to upload packages and vm images to [default: flynn]
  -c COMMIT     The commit to build [default: the master branch of https://github.com/flynnbase/flynn.git]
  -d DOMAIN     The CloudFront domain [default: dl.flynn.io]
  -r DIR        Resume the release using DIR

Requires AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and GITHUB_TOKEN to be set
USAGE
}

main() {
  local bucket commit dir domain

  while getopts "hb:c:d:r:" opt; do
    case $opt in
      h)
        usage
        exit 1
        ;;
      b) bucket=${OPTARG} ;;
      c) commit=${OPTARG} ;;
      d) domain=${OPTARG} ;;
      r)
        dir=${OPTARG}
        if [[ ! -d "${dir}" ]]; then
          fail "No such directory: ${dir}"
        fi
        ;;
      ?)
        usage
        exit 1
        ;;
    esac
  done

  check_aws_keys
  check_github_token

  bucket="${bucket:-"flynn"}"
  dir="${dir:-$(mktemp -d)}"
  domain="${domain:-"dl.flynn.io"}"

  if [[ -z "${commit}" ]]; then
    info "determining commit"
    commit=$(curl -s https://api.github.com/repos/flynnbase/flynn/git/refs/heads/master | jq --raw-output .object.sha)
    if [[ -z "${commit}" ]]; then
      fail "could not determine commit"
    fi
  fi
  info "starting release of commit ${commit}"

  info "getting flynn release manifest"
  local manifest="$(s3cmd --no-progress get "s3://${bucket}/release/manifest.json" - 2>/dev/null)"
  if [[ -z "${manifest}" ]]; then
    manifest='{}'
  fi

  info "checking for existing release"
  if jq --exit-status ".versions[] | select(.commit==\"${commit}\")" <<< "${manifest}"; then
    fail "commit ${commit} has already been released"
  fi

  # release-packages prints results to fd 3, so create a pipe to read them
  results="$(mktemp -u)"
  mkfifo "${results}"
  trap "rm -f ${results}" EXIT

  info "releasing packages"
  "${ROOT}/script/release-packages" \
    -k \
    -b "${bucket}" \
    -r "${dir}" \
    "${commit}" \
    3>"${results}" \
    &

  # grab the version and deb_url from the results
  local version deb_url
  while read line; do
    IFS="|" read field value <<< "${line}"

    case "${field}" in
      version)
        version="${value}"
        ;;
      deb_url)
        deb_url="${value}"
        ;;
    esac
  done < "${results}"

  if [[ -z "${version}" ]] || [[ -z "${deb_url}" ]]; then
    fail "failed to release packages"
  fi

  info "releasing vm images"
  "${ROOT}/script/release-vm-images" \
    -k \
    -b "${bucket}" \
    -d "${domain}" \
    -r "${dir}" \
    "${version}" \
    "${deb_url}"

  info "updating flynn release manifest"
  "${ROOT}/util/release/flynn-release" version \
    "${version}" \
    "${commit}" \
    <<< "${manifest}" \
    > "${dir}/manifest.json"

  info "uploading flynn release manifest"
  s3cmd put --acl-public --no-preserve "${dir}/manifest.json" "s3://${bucket}/release/manifest.json"

  info "tagging release"
  tag_release "${commit}" "${version}"

  info "successfully released Flynn version ${version}"

  info "removing locally built files"
  rm -rf "${dir}"

  info "done!"
}

check_github_token() {
  if [[ -z "${GITHUB_TOKEN}" ]]; then
    fail "GITHUB_TOKEN must be set"
  fi
}

# tag_release tags a release by posting to the following Github API endpoint:
# https://developer.github.com/v3/git/refs/#create-a-reference
tag_release() {
  local commit=$1
  local version=$2

  curl \
    --header "Content-Type: application/json" \
    --header "Authorization: token ${GITHUB_TOKEN}" \
    --data "{\"ref\":\"refs/tags/v${version}\",\"sha\":\"${commit}\"}" \
    "https://api.github.com/repos/flynnbase/flynn/git/refs"
}

main $@
